buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath 'com.google.code.gson:gson:2.8.7'
		classpath 'com.modrinth.minotaur:Minotaur:2.4.3'
		classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
	}
}
plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'io.github.juuxel.loom-quiltflower' version '1.7.3'
	id 'org.quiltmc.quilt-mappings-on-loom' version '4.2.0'
	id 'maven-publish'
}

if (System.getenv("MODRINTH_TOKEN")) {
	apply plugin: "com.modrinth.minotaur"
}
if (System.getenv("CURSE_TOKEN")) {
	apply plugin: "com.matthewprenger.cursegradle"
}

sourceCompatibility = JavaVersion.toVersion(17)
targetCompatibility = JavaVersion.toVersion(17)

archivesBaseName = project.archives_base_name
version = project.mod_version
if (version.contains("{COMMIT}")) {
	version = version.replace("{COMMIT}", 'git rev-parse --short HEAD'.execute().getText().trim())
}
if (version.contains("{DIRTY}")) {
	def dirty = !'git diff-index HEAD'.execute().in.text.trim().isEmpty()
	version = version.replace("{DIRTY}", dirty ? '-dirty' : '')
}
if (version.contains("{COMMITNUM}")) {
	version = version.replace("{COMMITNUM}", 'git rev-list --count HEAD'.execute().getText().trim())
}
group = project.maven_group

repositories {
	maven {
		url 'https://repo.unascribed.com'
		content {
			includeGroup 'com.unascribed'
		}
	}
	maven {
		url "https://maven.shedaniel.me/"
		content {
			includeGroup 'me.shedaniel'
			includeGroup 'me.shedaniel.cloth'
			includeGroup 'me.shedaniel.cloth.api'
			includeGroup 'dev.architectury'
		}
	}
	maven {
		url 'https://maven.terraformersmc.com/releases/'
		content {
			includeGroup 'dev.emi'
			includeGroup 'com.terraformersmc'
		}
	}
	maven {
		url 'https://ladysnake.jfrog.io/artifactory/mods'
		content {
			includeGroup 'dev.onyxstudios.cardinal-components-api'
		}
	}
	maven {
		url 'https://maven.cafeteria.dev/releases/'
		content {
			includeGroup 'me.luligabi'
		}
	}
	maven {
		url 'https://maven.quiltmc.org/repository/release'
		content {
			includeGroup 'org.quiltmc'
		}
	}
	mavenLocal()
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings(loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:1.19.2+build.1:v2")
	})
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"

	modImplementation fabricApi.module('fabric-lifecycle-events-v1', fabric_version)
	modImplementation fabricApi.module('fabric-command-api-v2', fabric_version)
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

java {
	withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"
}

tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}